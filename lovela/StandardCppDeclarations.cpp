#include "pch.h"
#include "StandardCppDeclarations.h"

void StandardCppDeclarations::GetHeader(std::vector<std::wstring>& headers, std::wstring_view function)
{
	// TODO: Add functions
	static const std::map<std::string, std::string> declarations{
		{"acos", "cmath"},
		{"asin", "cmath"},
		{"atan", "cmath"},
		{"atan2", "cmath"},
		{"cos", "cmath"},
		{"cosh", "cmath"},
		{"sin", "cmath"},
		{"sinh", "cmath"},
		{"tanh", "cmath"},
		{"exp", "cmath"},
		{"frexp", "cmath"},
		{"ldexp", "cmath"},
		{"log", "cmath"},
		{"log10", "cmath"},
		{"modf", "cmath"},
		{"pow", "cmath"},
		{"sqrt", "cmath"},
		{"ceil", "cmath"},
		{"fabs", "cmath"},
		{"floor", "cmath"},
		{"fmod", "cmath"},

		{"fclose", "cstdio"},
		{"clearerr", "cstdio"},
		{"feof", "cstdio"},
		{"ferror", "cstdio"},
		{"fflush", "cstdio"},
		{"fgetpos", "cstdio"},
		{"fopen", "cstdio"},
		{"fread", "cstdio"},
		{"freopen", "cstdio"},
		{"fseek", "cstdio"},
		{"fsetpos", "cstdio"},
		{"ftell", "cstdio"},
		{"fwrite", "cstdio"},
		{"remove", "cstdio"},
		{"rename", "cstdio"},
		{"rewind", "cstdio"},
		{"setbuf", "cstdio"},
		{"setvbuf", "cstdio"},
		{"tmpfile", "cstdio"},
		{"tmpnam", "cstdio"},
		{"fprintf", "cstdio"},
		{"printf", "cstdio"},
		{"sprintf", "cstdio"},
		{"vfprintf", "cstdio"},
		{"vprintf", "cstdio"},
		{"vsprintf", "cstdio"},
		{"fscanf", "cstdio"},
		{"scanf", "cstdio"},
		{"sscanf", "cstdio"},
		{"fgetc", "cstdio"},
		{"fgets", "cstdio"},
		{"fputc", "cstdio"},
		{"fputs", "cstdio"},
		{"getc", "cstdio"},
		{"getchar", "cstdio"},
		{"gets", "cstdio"},
		{"putc", "cstdio"},
		{"putchar", "cstdio"},
		{"puts", "cstdio"},
		{"ungetc", "cstdio"},
		{"perror", "cstdio"},

		{"atof", "cstdlib"},
		{"atoi", "cstdlib"},
		{"atol", "cstdlib"},
		{"strtod", "cstdlib"},
		{"strtol", "cstdlib"},
		{"strtoul", "cstdlib"},
		{"calloc", "cstdlib"},
		{"free", "cstdlib"},
		{"malloc", "cstdlib"},
		{"realloc", "cstdlib"},
		{"abort", "cstdlib"},
		{"atexit", "cstdlib"},
		{"exit", "cstdlib"},
		{"getenv", "cstdlib"},
		{"system", "cstdlib"},
		{"bsearch", "cstdlib"},
		{"qsort", "cstdlib"},
		{"abs", "cstdlib"},
		{"div", "cstdlib"},
		{"labs", "cstdlib"},
		{"ldiv", "cstdlib"},
		{"rand", "cstdlib"},
		{"srand", "cstdlib"},
		{"mblen", "cstdlib"},
		{"mbstowcs", "cstdlib"},
		{"mbtowc", "cstdlib"},
		{"wcstombs", "cstdlib"},
		{"wctomb", "cstdlib"},

		{"memchr", "cstring"},
		{"memcmp", "cstring"},
		{"memcpy", "cstring"},
		{"memmove", "cstring"},
		{"memset", "cstring"},
		{"strcat", "cstring"},
		{"strncat", "cstring"},
		{"strchr", "cstring"},
		{"strcmp", "cstring"},
		{"strncmp", "cstring"},
		{"strcoll", "cstring"},
		{"strcpy", "cstring"},
		{"strncpy", "cstring"},
		{"strcspn", "cstring"},
		{"strerror", "cstring"},
		{"strlen", "cstring"},
		{"strpbrk", "cstring"},
		{"strrchr", "cstring"},
		{"strspn", "cstring"},
		{"strstr", "cstring"},
		{"strtok", "cstring"},
		{"strxfrm", "cstring"},
	};

	auto iter = declarations.find(to_string(function));
	if (iter != declarations.end())
	{
		headers.emplace_back(to_wstring(iter->second));
	}
}
